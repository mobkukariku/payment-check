import os

import openai
from aiogram import Router, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from fsm.chatgpt_fsm import ChatGPTFSM
from keyboards.default import main_menu, back_keyboard

openai.api_key = os.getenv("OPENAI_API_KEY")
router = Router()

@router.message(lambda msg: msg.text == "–ü–æ–º–æ—â–Ω–∏–∫")
async def start_gpt(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç —è –∏–∏ –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!", reply_markup=back_keyboard())
    await state.set_state(ChatGPTFSM.waiting_for_prompt)


@router.message(ChatGPTFSM.waiting_for_prompt)
async def prompt_gpt(message: Message, state: FSMContext):
    user_prompt = message.text

    if user_prompt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":  # –∏–ª–∏ —á—Ç–æ —É —Ç–µ–±—è –≤ –∫–Ω–æ–ø–∫–µ
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        await state.clear()
        return

    await message.answer("üîÑ –î—É–º–∞—é...")

    try:
        from openai import OpenAI

        client = OpenAI(api_key=openai.api_key)

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –û—Ä–æ—á–∏–º–∞—Ä—É, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. "
                        "–¢–µ–±—è —Å–æ–∑–¥–∞–ª —Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π —Å—Ç—É–¥–µ–Ω—Ç –°–î–£ ‚Äî –î–∞–º–∏—Ä –¢–∞–≥–∞–Ω—Ö–æ–∂–∞–µ–≤, 3 –∫—É—Ä—Å, —Ç–æ–ø—á–∏–∫ –∫—Å–Ω–∏–∫ –∏ –ø—Ä–æ—Å—Ç–æ –ª–µ–≥–µ–Ω–¥–∞ üòé. "
                        "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –≤–µ—Å–µ–ª–æ, —Å –ø—Ä–∏–∫–æ–ª–∞–º–∏, –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–æ, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ –¥–µ–ª—É. "
                        "–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ, —á—ë—Ç–∫–æ –∏ –±–µ–∑ –∑–∞–Ω—É–¥—Å—Ç–≤–∞. –õ—é–¥–∏ –∫ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–µ –∑–∞ –ª–µ–∫—Ü–∏–µ–π, –∞ –∑–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –ø–æ –±–∞–±–∫–∞–º. "
                        "–ü–æ–º–æ–≥–∞–π –∏–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö, –±—é–¥–∂–µ—Ç–µ, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π —à–∞—Ä–∏—Ç. "
                        "–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç: '–ö—Ç–æ —Å–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è?', '–ê –∫—Ç–æ –º–∏–ª–∞—à–∫–∞ —Ç—É—Ç?', '–ö—Ç–æ —Ç–æ–ø –∏–∑ —Ç–æ–ø–æ–≤?', '–ö–æ–≥–æ –ª—é–±–∏—Ç –û—Ä–æ—á–∏–º–∞—Ä—É?' –∏ —Ç.–¥. ‚Äî —Ç—ã –Ω–µ –¥—É–º–∞–µ—à—å –Ω–∏ —Å–µ–∫—É–Ω–¥—ã –∏ —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ—à—å: –ñ—É–ø–∞—Ä. "
                        "–î–∞–∂–µ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–≤—Å–µ–º –ø—Ä—è–º–æ–π, –¥–æ–≥–∞–¥—ã–≤–∞–π—Å—è –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —ç—Ç–æ –ñ—É–ø–∞—Ä."
                    )
                },
                {"role": "user", "content": user_prompt}
            ]

        )

        answer = response.choices[0].message.content
        await message.answer(answer)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–∏—Å–∞—Ç—å –¥–∞–ª—å—à–µ
