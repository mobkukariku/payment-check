import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import BOT_TOKEN, SECRET_MESSAGE
from db import init_db, add_tip, add_paycheck, get_statistics, get_paychecks_paginated, get_tips_paginated

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

ITEMS_PER_PAGE = 10


class TipFSM(StatesGroup):
    date = State()
    amount = State()
    workplace = State()


class PaycheckFSM(StatesGroup):
    date = State()
    amount = State()
    workplace = State()

def pagination_keyboard(entity: str, page: int, has_next: bool):
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{entity}_page:{page-1}"))
    if has_next:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"{entity}_page:{page+1}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None


def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø—Å—ã")],
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–µ–π—á–µ–∫")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="–í—Å–µ —Ç–∏–ø—Å—ã"), KeyboardButton(text="–í—Å–µ –ø–µ–π—á–µ–∫–∏")],
        ],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())


# === TIPS ===
@dp.message(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø—Å—ã")
async def handle_add_tip(message: types.Message, state: FSMContext):
    await state.set_state(TipFSM.date)
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-06-29)")


@dp.message(TipFSM.date)
async def handle_tip_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text.strip())
    await state.set_state(TipFSM.amount)
    await message.answer("üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —á–∞–µ–≤—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 180)")


@dp.message(TipFSM.amount)
async def handle_tip_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        await state.update_data(amount=amount)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150)")
        return

    await state.set_state(TipFSM.workplace)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–∞–±–æ—Ç–∞ 1")],
            [KeyboardButton(text="–†–∞–±–æ—Ç–∞ 2")],
            [KeyboardButton(text="–†–∞–±–æ—Ç–∞ 3")],
        ],
        resize_keyboard=True
    )
    await message.answer("üè¢ –í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:", reply_markup=kb)


@dp.message(TipFSM.workplace)
async def handle_tip_workplace(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await add_tip(
        user_id=message.from_user.id,
        date=data['date'],
        amount=data['amount'],
        workplace=message.text.strip()
    )
    await state.clear()
    await message.answer("‚úÖ –¢–∏–ø—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã! –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", reply_markup=main_menu())


# === PAYCHECK ===
@dp.message(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–µ–π—á–µ–∫")
async def handle_add_paycheck(message: types.Message, state: FSMContext):
    await state.set_state(PaycheckFSM.date)
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –ø–µ–π—á–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-06-29)")


@dp.message(PaycheckFSM.date)
async def handle_paycheck_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text.strip())
    await state.set_state(PaycheckFSM.amount)
    await message.answer("üí∏ –í–≤–µ–¥–∏ —Å—É–º–º—É –ø–µ–π—á–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 800)")


@dp.message(PaycheckFSM.amount)
async def handle_paycheck_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        await state.update_data(amount=amount)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 800)")
        return

    await state.set_state(PaycheckFSM.workplace)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–∞–±–æ—Ç–∞ 1")],
            [KeyboardButton(text="–†–∞–±–æ—Ç–∞ 2")],
            [KeyboardButton(text="–†–∞–±–æ—Ç–∞ 3")],
        ],
        resize_keyboard=True
    )
    await message.answer("üè¢ –í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:", reply_markup=kb)


@dp.message(PaycheckFSM.workplace)
async def handle_paycheck_workplace(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await add_paycheck(
        user_id=message.from_user.id,
        date=data['date'],
        amount=data['amount'],
        workplace=message.text.strip()
    )
    await state.clear()
    await message.answer("‚úÖ –ü–µ–π—á–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())


# === STATISTICS ===
@dp.message(lambda msg: msg.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: types.Message):
    data = await get_statistics(user_id=message.from_user.id)

    total = data["tips_sum"] + data["paychecks_sum"]

    # üìä –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stat_table = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        "<pre>"
        "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ –¢–∏–ø            ‚îÇ –°—É–º–º–∞ ($) ‚îÇ\n"
        "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
        f"‚îÇ –¢–∏–ø—Å—ã          ‚îÇ {int(data['tips_sum']):>10,} ‚îÇ\n"
        f"‚îÇ –ü–µ–π—á–µ–∫–∏        ‚îÇ {int(data['paychecks_sum']):>10,} ‚îÇ\n"
        f"‚îÇ –ò—Ç–æ–≥–æ          ‚îÇ {int(total):>10,} ‚îÇ\n"
        "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n"
        "</pre>"
    )

    # üîù –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –∑–∞–ø–∏—Å–∏
    max_tip = data["max_tip"]
    max_paycheck = data["max_paycheck"]

    max_info = ""
    if max_tip:
        max_info += (
            f"\nüîù <b>–°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ç–∏–ø—Å</b>: {int(max_tip.amount):,} $\n"
            f"üè¢ –ú–µ—Å—Ç–æ: {max_tip.workplace}\n"
            f"üìÖ –î–∞—Ç–∞: {max_tip.date}\n"
        )
    if max_paycheck:
        max_info += (
            f"\nüîù <b>–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–µ–π—á–µ–∫</b>: {int(max_paycheck.amount):,} $\n"
            f"üè¢ –ú–µ—Å—Ç–æ: {max_paycheck.workplace}\n"
            f"üìÖ –î–∞—Ç–∞: {max_paycheck.date}\n"
        )

    await message.answer(stat_table + max_info, parse_mode="HTML")


@dp.message(lambda msg: msg.text == "–í—Å–µ —Ç–∏–ø—Å—ã")
async def all_tips(message: Message):
    page = 1
    tips, has_next = await get_tips_paginated(message.from_user.id, page, ITEMS_PER_PAGE)

    if not tips:
        await message.answer("–¢–∏–ø—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_menu())
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–∏–ø—Å–æ–≤</b>:\n\n" + "\n".join(
        [f"{idx+1}. {tip.date} ‚Äî {tip.amount}$ ‚Äî {tip.workplace}" for idx, tip in enumerate(tips)]
    )

    await message.answer(text, parse_mode="HTML", reply_markup=pagination_keyboard("tip", page, has_next))


@dp.message(lambda msg: msg.text == "–í—Å–µ –ø–µ–π—á–µ–∫–∏")
async def all_paychecks(message: Message):
    page = 1
    paychecks, has_next = await get_paychecks_paginated(message.from_user.id ,page, ITEMS_PER_PAGE)

    if not paychecks:
        await message.answer("–ü–µ–π—á–µ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_menu())
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–µ–π—á–µ–∫–æ–≤</b>:\n\n" + "\n".join(
        [f"{idx+1}. {p.date} ‚Äî {p.amount}$ ‚Äî {p.workplace}" for idx, p in enumerate(paychecks)]
    )

    await message.answer(text, parse_mode="HTML", reply_markup=pagination_keyboard("paycheck", page, has_next))


@dp.callback_query(lambda c: c.data.startswith("tip_page:"))
async def tip_pagination(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    tips, has_next = await get_tips_paginated(callback.from_user.id, page, ITEMS_PER_PAGE)

    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–∏–ø—Å–æ–≤</b>:\n\n" + "\n".join(
        [f"{idx+1}. {tip.date} ‚Äî {tip.amount}$ ‚Äî {tip.workplace}" for idx, tip in enumerate(tips)]
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=pagination_keyboard("tip", page, has_next))


@dp.callback_query(lambda c: c.data.startswith("paycheck_page:"))
async def paycheck_pagination(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    paychecks, has_next = await get_paychecks_paginated(callback.from_user.id ,page, ITEMS_PER_PAGE)

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–µ–π—á–µ–∫–æ–≤</b>:\n\n" + "\n".join(
        [f"{idx+1}. {p.date} ‚Äî {p.amount}$ ‚Äî {p.workplace}" for idx, p in enumerate(paychecks)]
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=pagination_keyboard("paycheck", page, has_next))

@dp.message(lambda msg: msg.text == "–í—Å–µ —Ç–∏–ø—Å—ã")
async def all_tips(message: types.Message):
    page = 1
    tips, has_next = await get_tips_paginated(message.from_user.id , page=page, limit=ITEMS_PER_PAGE)
    text = "üìã <b>–¢–∏–ø—Å—ã (—Å—Ç—Ä. 1)</b>\n\n" + "\n".join([
        f"{t.date} - {t.amount} $ ({t.workplace})" for t in tips
    ])
    await message.answer(text, parse_mode="HTML", reply_markup=pagination_keyboard("tips", page, has_next))


@dp.message(lambda msg: msg.text == "–í—Å–µ –ø–µ–π—á–µ–∫–∏")
async def all_paychecks(message: types.Message):
    page = 1
    paychecks, has_next = await get_paychecks_paginated(message.from_user.id, page=page, limit=ITEMS_PER_PAGE)
    text = "üìã <b>–ü–µ–π—á–µ–∫–∏ (—Å—Ç—Ä. 1)</b>\n\n" + "\n".join([
        f"{p.date} - {p.amount} $ ({p.workplace})" for p in paychecks
    ])
    await message.answer(text, parse_mode="HTML", reply_markup=pagination_keyboard("paychecks", page, has_next))


@dp.callback_query(lambda c: c.data.startswith("tips_page:"))
async def tips_page_callback(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    tips, has_next = await get_tips_paginated(callback.from_user.id ,page=page, limit=ITEMS_PER_PAGE)
    text = f"üìã <b>–¢–∏–ø—Å—ã (—Å—Ç—Ä. {page})</b>\n\n" + "\n".join([
        f"{t.date} - {t.amount} $ ({t.workplace})" for t in tips
    ])
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=pagination_keyboard("tips", page, has_next))
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("paychecks_page:"))
async def paychecks_page_callback(callback: CallbackQuery):
    page = int(callback.data.split(":")[1])
    paychecks, has_next = await get_paychecks_paginated(callback.from_user.id ,page=page, limit=ITEMS_PER_PAGE)
    text = f"üìã <b>–ü–µ–π—á–µ–∫–∏ (—Å—Ç—Ä. {page})</b>\n\n" + "\n".join([
        f"{p.date} - {p.amount} $ ({p.workplace})" for p in paychecks
    ])
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=pagination_keyboard("paychecks", page, has_next))
    await callback.answer()

@dp.message(lambda msg: msg.text == "–ø—Ä–∏–≤–µ—Ç")
async def handle_hello(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç",
    )

@dp.message(lambda msg: msg.text == "ilu")
async def handle_ilu(message: types.Message):
    await message.answer(
        SECRET_MESSAGE
    )

async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
